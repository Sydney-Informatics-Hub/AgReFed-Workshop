---
title: "{{< fa brands r-project >}} Introduction"
markdown:
    canonical: true
---

:::{.callout-tip}
## In this workshop

1. Learn about AgReFed and the `dataharvester` package
2. Use `dataharvester` to access and analyse data with a YAML configuration file
3. Preview and manipulate downloaded data in GeoTIFF and .csv formats
:::

## Introduction

Hello and welcome to **Workshop 1**. In this workshop, we will learn about AgReFed and the `dataharvester` package and access data with a YAML configuration file.

<!-- In **Workshop 2**, we will preview and manipulate downloaded data manually without the YAML config, and explore some Google Earth Engine functionality.

**Workshop 3** will introduce to you some of the more advanced features of `dataharvester` including the ability to preprocess data and create custom data products. -->

::: callout-note
**We highly recommend you to run the workshop in RStudio Cloud.** Make sure that you have looked at [Setting up R](/rdocs/r01-setup.qmd) as you must authenticate to Google Earth Engine (GEE) to access some data.
:::

##  [{{< fa person-chalkboard >}} Demo 1: Authentication]{style="color: green;"}

::: {.callout-tip icon="false"}
## Agenda

In this demo, we will: 

- check that your `reticulate` environment is set up correctly;
- initialise Google Earth Engine (GEE), and authenticate to a Google account; and
- perform a simple test to validate that the Data-Harvester is working.

:::

Run the following code in your RStudio session:

```r
library(dataharvester)
initialise_harvester("r-reticulate")
```
The function will verify that the environment "r-reticulate" is available and contains all the required dependencies. If it does not, it will install them for you.

Once this is complete, you may want to authenticate to Google Earth Engine (GEE). This is not required for all data products, but it is required for some. To do this, add the following argument to the same code:

```r
initialise_harvester("r-reticulate", earthengine = TRUE)
```

The function will now try to authenticate to Google Earth Engine. This might involve opening a browser window and copying a code into the console.

You **must** initialise and authenticate to Google Earth Engine as each authentication key is tied to a specific Google account. Detailed instructions on authentication can also be found on the `dataharvester` package documentation online.

##  [{{< fa person-chalkboard >}} Demo 2: YAML config]{style="color: green;"}

::: {.callout-tip icon="false"}
## Agenda

To warm-up, we will:

1. run a simple YAML configuration file to demonstrate how it works;
2. preview the output data; and
3. learn more about different configuration options.

:::



The Data-Harvester uses a YAML configuration file to perform bulk downloads in a single command.

::: {.callout-caution collapse="true"}
### What is YAML?
YAML is a human-readable data-serialization language. It is commonly used for configuration files and in applications where data is being stored or transmitted. YAML files are easy to read and write, and are often used to configure software applications. A typical YAML file looks like this:

```yaml
---
name: "John Smith"
age: 42
occupation: "gardener"
---
```

Looks familiar? If you have used Markdown or R Markdown, YAML is used to define the metadata for the document.

A YAML configuration file helps to keep track of the data you have downloaded and the analyses you have performed. It also allows you to easily reproduce your analyses and share them with others.
:::



#### Basic usage

Below is the YAML file for `basic_config.yaml` which can be found in the `assets` folder in RStudio Cloud. The file can also be downloaded from the [GitHub repository]().

```yaml
---
outpath: downloads/
target_bbox: [149.769345, -30.335861, 149.949173, -30.206271]
target_dates: [2021]
target_res: 6.0
target_sources:
  DEA: [landsat_barest_earth]
```
To run the configuration file, we use the `harvest()` function. The function takes a single argument, `path_to_config`, which is the path to the YAML file. The path can be either relative or absolute.

::: {.callout-caution collapse="true"}

### Relative and absolute path strings
A relative path is a path that is relative to the current working directory. For example, if you are working in the `dataharvester` directory, the path to the `basic_config.yaml` file, stored in the `assets` folder, is `assets/basic_config.yaml`.

An absolute path is a path that starts from the root directory. For example, the absolute path to the `basic_config.yaml` file is `/home/rstudio/dataharvester/assets/basic_config.yaml`. 

Relative paths are useful when you are working in a project directory, as they are shorter and easier to remember. Relative paths also allow you to share your code with others, as they will not need to change the path in the configuration file as long as they are working in the same folder. Absolute paths are useful when you are working in a different directory, or when you are working on a local machine.
:::

```r
harvest("assets/basic_config.yaml")
```
Several optional arguments are available to customise the output of `harvest()`:

- `log_name`: the name of the log file output which stores some information about the download. The default is `"download_log.txt"`.
- `preview`: if `TRUE`, the function will preview the output raster data
- `contour`: if `TRUE`, the function will add a contour plot to the output raster data

```r
harvest("assets/basic_config.yaml", 
  log_name = "basic_config", 
  preview = TRUE, 
  contour = TRUE)
```

Note how the function recognises that a file has been downloaded and will not re-download it. This is useful if you want to re-run the configuration file to add more data sources -- we will see this in action later.

#### Adding multiple data sources

Additional data sources can be added to the configuration file by adding a new key to the `target_sources` list. Below we have added sources from DEM, Landscape, SILO and SLGA collections. Copy the new lines and add them to `basic_config.yaml`:

```yaml
---
outpath: downloads/
target_bbox: [149.769345, -30.335861, 149.949173, -30.206271]
target_dates: [2021]
target_res: 6.0

target_sources:
  DEA: [landsat_barest_earth]
  # add the new lines below --------------------
  DEM: [DEM]
  Landscape: [Relief_300m]
  SILO:
    monthly_rain: [sum]
  SLGA:
    Bulk_Density: [0-5cm]
    Clay: [0-5cm]
```

Let's run the above configuration file and preview the output data. You should already have the `DEA` data downloaded, so the function will only download the new data sources. In addition, the `preview` and `contour` arguments have been set to `TRUE` to preview the output data. We will also create a new log file, called `"multi_config.txt"` for this run.

```r
harvest("assets/multi_config.yaml", 
  log_name = "multi_config", 
  preview = TRUE, 
  contour = TRUE)
```

## [{{< fa keyboard >}} Exercise 1: Update config]{style="color: blue;"}

::: {.callout-note icon="false"}
## {{< fa keyboard >}} On your own

Refer to the [YAML Overview](/Settings_Overview.md) section and update the `basic_config.yaml` file to download the following data sources:

- Slope and aspect from the Landscape collection
- Total (sum) maximum temperature from the SILO collection

Then, run `harvest()` on the configuration file and preview the output.

:::

::: {.callout-caution icon="false" collapse="true"}
## {{< fa keyboard >}} Solution

```yaml
---
outpath: downloads/
target_bbox: [149.769345, -30.335861, 149.949173, -30.206271]
target_dates: [2021]
target_res: 6.0

target_sources:
  DEA: [landsat_barest_earth]
  DEM: [DEM]
  Landscape: [Relief_300m, Slope, Aspect]  # <- edit this line
  SILO:
    monthly_rain: [sum]
    max_temp: [sum]  # <- add this line
  SLGA:
    Bulk_Density: [0-5cm]
    Clay: [0-5cm]
```
:::

##  [{{< fa person-chalkboard >}} Demo 3: Google Earth Engine]{style="color: green;"}


::: {.callout-tip icon="false"}
## Agenda

Time to tap into the Google Earth Engine API. This demo will:

- Introduce using the YAML configuration file to download data from Google Earth Engine
- Discuss what can and cannot be done with the YAML configuration file

:::

We will continue to use the same configuration file, `basic_config.yaml`, to download data from **Google Earth Engine**. Below, we add a new key to the `target_sources` list, called `GEE`. **Workshop 2** will cover how to use the GEE API in more detail, but for now, we will preview how the YAML configuration file can be used download data from GEE.


```yaml
---
infile:  
outpath: downloads/
colname_lat:  
colname_lng:  
target_bbox: [149.769345, -30.335861, 149.949173, -30.206271]
target_dates: [2021]
target_res: 6.0

target_sources:
  DEA: [landsat_barest_earth]
  DEM: [DEM]
  Landscape: [Relief_300m, Slope, Aspect]  
  SILO:
    monthly_rain: [sum]
    max_temp: [sum] 
  SLGA:
    Bulk_Density: [0-5cm]
    Clay: [0-5cm]
  # add the new lines below --------------------
  GEE:
    preprocess:
      collection: LANDSAT/LC09/C02/T1_L2
      mask_clouds: True
      reduce: median
      spectral: [NDVI]
    download:
      bands: [NDVI, SR_B2, SR_B3, SR_B4]
      scale: 100
```
The configuration will download a Landsat 9 images for the year 2021, composite them all to a single image using the `median` reducer, and calculate the `NDVI` spectral index. The output image will be downloaded as a GeoTIFF file, with the `NDVI` spectral index and the RGB bands (`SR_B2`, `SR_B3`, `SR_B4`) included in the raster image.

## [{{< fa keyboard >}} Exercise 2: GEE config]{style="color: blue;"}

::: {.callout-note icon="false"}
## {{< fa keyboard >}} On your own

Let's download from a different data source by referring to the [Earth Engine Data Catalog](https://developers.google.com/earth-engine/datasets/catalog). Have a look at the different sections and tabs (Description
Bands, Image Properties, Terms of Use).

**Task**

Change the `collection` attribute in `basic_config.yaml` to one of [Landsat](https://developers.google.com/earth-engine/datasets/catalog/landsat), [Sentinel](https://developers.google.com/earth-engine/datasets/catalog/sentinel) or [MODIS](https://developers.google.com/earth-engine/datasets/catalog/modis) **surface reflectance** collections. Then, run `harvest()` on the configuration file and preview the output.

**Questions**

- What happens when you provide an incorrect dataset name?
- Which other attribute(s) needed to be changed in the configuration file to download data from a different collection?
- What happens when you provide an incorrect band name?

:::

Your instructor will discuss this exercise in the next workshop.

## Wrapping up

This is the end of **Workshop 1**. In this workshop we have covered setup and using the YAML connfiguration file to download from multiple API sources. In the next workshop ([**Workshop 2**](/rdocs/r03-basic.qmd)), we will cover how to use individual download functions to create custom workflows for downloading data.

See you there!
